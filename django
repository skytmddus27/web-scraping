웹 프로그밍
2웹 프로그래밍의 이해
 HTTP(S) HTTP(S) 프로토콜로 통신하는 , 클라이언트와 서버를 개발
 웹 클라이언트와 웹 서버를 같이 개발 및 웹 클라이언트 또는 웹 서버 하 나만 개발
 웹 서버를 개발하는 경우가 많아서 파이썬 웹 프로그래밍이라고 하면 우 선적으로 장고 Django Django DjangoDjango와 같은 웹 프레임워크를 사용하여 웹 서버를 개발 웹 프로그래밍의 이해
3웹 프로그래밍의 이해
 HTTP(S) HTTP(S) 프로토콜로 통신하는 , 클라이언트와 서버를 개발 웹 프로그래밍의 이해
4
웹 브라우저를 사용하여 요청
 브라우저는 주소창에 입력된 문장을 해석하여 웹 서버에게 HTTP 요청을
보내는 웹 클라이언트의 역할을 수행
 웹 브라우저 요청에 대한 웹 서버의 응답
다양한 웹클라이언트
5리눅스 Curl 명령을 사용하여 요청
 리눅스 curl 명령은 HTTP/HTTPS/FTP HTTP/HTTPS/FTP HTTP/HTTPS/FTP HTTP/HTTPS/FTP HTTP/HTTPS/FTP HTTP/HTTPS/FTP HTTP/HTTPS/FTP 등 여러 가지의 프로토콜을 사용 하여 데이터를 송수신할 수 있는 명령
 curl curl 명령 요청에 대한 웹 서버의 응답 다양한 웹클라이언트
6Telnet 을 사용하여 요청
 리눅스의 telnet telnet telnet 프로그램을 사용하여 HTTP HTTP 요청을 보낼 수도 있음
 telnet telnet telnet 명령은 터미널 창에서 입력하는 내용을 그대로 웹 서버에 전송 다양한 웹클라이언트
7Telnet 을 사용하여 요청
 telnet telnet telnet 프로그램이 웹 클라이언트의 역할을 수행
 응답 메시지를 수신한 후,
telnet telnet telnet 프로그램을 종료하기
위해 마지막 두 라인을 입력 다양한 웹클라이언트
8직접 만든 클라이언트로 요청
 직접 만든 클라이언트 요청에 대한 웹 서버의 응답
 웹 클라이언트의 형태는 달라도 동일한 요청에 대해서 동일한 응답을 받 는 것을 확인 다양한 웹클라이언트
9HTTP 메지시의 구조
 스타트라인은 요청 메시지일 때 요청라인 request linerequest line request linerequest line request line이라고 하고 ,
 응답 메시지일 때 상태라인 status line status line status line status line이라고 함 HTTP HTTP HTTP HTTP HTTP 프로토콜
10 HTTP 메지시의 구조
 요청라인으로 , 요청 방식 method, method, method, method, 요청 URL, URL, URL, 프로토콜 버전으로 구성 HTTP HTTP HTTP HTTP HTTP 프로토콜
11 HTTP 처리방식
 HTTP HTTP 메소드 종류
 GET GET 방식은 지정한 URL 의 정보를 가져오는 메소드로 , 가장 많이 사용
 POST POST 의 대표적인 기능은 리소스를 생성하는 것으로 , 블로그에 글을 등록 하는 경우가 이에 해당
 PUT 은 리소스를 변경하는 데 사용 HTTP HTTP HTTP HTTP HTTP 프로토콜
12 GET 과 POST POST 메소드
 현실적으로 가장 많이 사용하는 메소드는 GET GET과 POST 2 POST 2 POST 2가지
 파이썬의 장고 프레임워크에서도 폼의 데이터는 POST POST 방식만을 사용하 고 있음 HTTP HTTP HTTP HTTP HTTP 프로토콜
13 상태코드
 서버에서의 처리 결과는 응답 메시지의 상태라인에 있는 상태 코드 Status Status Status code code 를 보고 파악할 수 있음 HTTP HTTP HTTP HTTP HTTP 프로토콜
14 상태코드
 자주 사용되는 상태 코드 HTTP HTTP HTTP HTTP HTTP 프로토콜
15 상태코드
 자주 사용되는 상태 코드 HTTP HTTP HTTP HTTP HTTP 프로토콜
16 URL 구성 항목
 URL URL 구성 항목
• URL URL 스킴 : URL : URL: URL 에 사용된 프로토콜을 의미 .
• 호스트명 : 웹 서버의 호스트명으로 , 도메인명 또는 IP 주소로 표현 .
• 포트번호 : 웹 서버 내의 서비스 포트번호 . 생략 시에는 디폴트 포트번호로 , http , http 는 80 을, https 는 443 을 사용
• 경로 : 파일이나 애플리케이션 경로를 의미
• 쿼리스트링 : 질의 문자열로 , 앰퍼샌드 (&) 로 구분된 이름 =값 쌍 형식으로 표현
• 프라그먼트 : 문서 내의 앵커 등 조각을 지정 URL URL URL URL 설계
17 URL 구성 항목
 URLURL 은 웹 클라이언트에서 호출한다는 시점에서 보면
 웹 서버에 존재하는 애플리케이션에 대한 API(Application Programming API(Application Programming API(Application Programming API(Application Programming API(Application Programming Interface) Interface) Interface) 라고 할 수 있음
 URLURL 을 바라보는 또 한 가지 측면은 REST REST REST 방식으로 URLURL 을 설계하는 것.
 REST REST REST 방식이란 웹 서버에 존재하는 요소들을 모두 리소스라고 정의하고 , URLURL 을 통해 웹 서버의 특정 리소스를 표현한다는 개념
URL URL URL URL 설계
18 간편 URL
 간편 URL URL은 쿼리스트링 없이 경로만 가진 간단한 구조의 URL URL을 말함 .
 검색 엔진 의 처리를 최적화하기 위해 생겨난 간편한 URL 은 URL 을 입력 하거나 기억하기 쉽다는 부수적인 장점도 있어 , 검색 엔진 친화적 URLsearch URLsearchURLsearch engine friendly engine friendly engine friendly engine friendly engine friendly engine friendly engine friendly engine friendly engine friendly url url또는 사용자 친화적 URLuser URLuserURLuser friendly friendly friendly friendly friendly url url이라고 부르기도 함
URL URL URL URL 설계
19 파이썬의 URL
 URL URL을 정의하 기 위해 정규표현식 Regular ExpressionRegular Expression Regular Expression Regular Expression Regular Expression Regular Expression Regular Expression을 추가적으로 사 용할 수 있음 . . URL URL URL URL 설계
20 웹 애플리케이션 서버
 웹 서버 및 웹 애플리케이션 서버라는 용어는 SW 측면의 서버 프로그램 을 의미 웹 애플리케이션 서버
21 웹 애플리케이션 서버
 기술의 발전에 따른 웹 서버 기술의 변화 웹 애플리케이션 서버
22 정적 페이지 vs vs 동적 페이지
 정적 static, static, 동적 dynamic 이란 용어는 사용자가 페이지를 요청하는 시점 에 페이지의 내용이 유지되는가 또는 변경되는가를 구분해주는 용어 .
 동적 페이지에는 프로그래밍 코드가 포함되어 있어서 페이지 요청 시점 에 HTML HTML 문장을 만들어내는 것 웹 애플리케이션 서버
23 전통적인 CGI CGI 방식의 요청 처리
 CGI CGI 방식의 근본적인 문제점은 각각의 클라이언트 요청에 대하여 독립적 인 별도의 프로세스가 생성
 요청이 많아질수록 프로세스가 많아지고 , 프로세스가 많아질수록 비례적 으로 프로세스가 점유하는 메모리 요구량도 커져서 시스템에 많은 부하 를 주는 요인 웹 애플리케이션 서버
24 CGI CGI 방식의 대안 기술
 CGI CGI 방식의 대안 기술 중 하나는 별도의 애플리케이션 (CGI (CGI 프로그램과 같은 역할을 하는 프로그램 프로그램 )을 Perl, PHP Perl, PHP Perl, PHP Perl, PHP Perl, PHP 등의 스크립트 스크립트 언어로 작성하고 ,
 스크립트를 처리하는 스크립트 엔진 (인터프리터 )을 웹 서버에 내장시켜 서 CGI CGI CGI 방식의 단점이었던 별도의 프로세스를 기동시키는 오버헤드를 줄 이는 방식 웹 애플리케이션 서버
25 애플리케이션 서버 방식
 웹 서버와 웹 애플리케이션 서버가 분리됨에 따라 , 서로의 역할도 구분하 여 사용하는 것이 좋음 .
 정적 페이지를 처리하는 경우에 비해서 동적 페이지를 처리하는 경우가 수 배에서 수십 배의 메모리를 소비하기 때문 . 웹 애플리케이션 서버
26 애플리케이션 서버 방식
 애플리케이션 서버 방식에서의 서버 간 구성도 . 웹 애플리케이션 서버
27 웹 서버와의 역할 구분
 서버와 애플리케이션 서버의 역할과 HW 배치
 웹 서버와 웹 애플리케이션 서버 프로그램이 함께 필요하며 , 이 두 개의 서버 를 동일한 HW 박스에서 기동시키는 것도 충분히 가능한 구성 .
 서비스 운용 관리 측면에서 하나의 HW 박스에 구성하는 것이 좀 더 간편한 방식이기 때문 웹 애플리케이션 서버
28 웹 서버와의 역할 구분
 서버와 애플리케이션 서버의 역할과 HW 배치
 웹 서버와 웹 애플리케이션 서버 프로그램이 함께 필요하며 , 이 두 개의 서버 를 동일한 HW 박스에서 기동시키는 것도 충분히 가능한 구성 .
 서비스 운용 관리 측면에서 하나의 HW 박스에 구성하는 것이 좀 더 간편한 방식이기 때문 웹 애플리케이션 서버
29 웹 라이브러리 구성
 urllib urllib 패키지에는 웹 클라이언트를 작성하는 데 사용되는 모듈들이 있으 며, 가장 빈번하게 사용하는 모듈
 http http 패키지는 크게 서버용과 클라이언트용 라이브러리로 나누어 모듈을 담고 있음
 쿠키 관련 라이브러리도 http http 패키지 내에서 서버용과 클라이언트용으 로 모듈이 구분 웹 라이브러리 구성
30 웹 라이브러리 구성
 웹 라이브러리 구성 웹 라이브러리 구성
31 웹 라이브러리 구성
 파이썬 3.x 에서 표준 라이브러리의 모듈 구성 사항 웹 라이브러리 구성
32 웹 라이브러리 구성
 사용웹 클라이언트를 위한 파이썬 표준 라이브러리가 있지만 , 실제 프로 젝트에서는 외부 라이브러리인 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 requests, beautifulsoup4 등을 더 많이 사용하는 편임
 좀 더 간편하고 이해하기 쉬운 문법을 제공하기 때문
 Python Shell Python Shell Python Shell Python Shell Python Shell 실행 파이썬 언어는 2가지 실행 방법을 제공
• python python 명령어로 파이썬 스크립트 파일 즉, *. , *. py 파일을 실행하는 방법 (> python (> python (> python example.py). example.py). example.py). example.py).
• 파이썬 쉘 모드에서 라인 단위로 실행하는 것. 파이썬 쉘 모드로 진입하려면 python python 명 령어만 입력 (>python (>python (>python 웹 라이브러리 구성
33 Urllib.parse Urllib.parse Urllib.parse 모듈
 scheme : URL scheme : URL scheme : URL scheme : URL scheme : URL scheme : URL에 사용된 프로토콜을 의미
 netloc netloc : 네트워크 위치 . user : . user :. user : . user :. user :password@hostpassword@host password@hostpassword@hostpassword@host password@host :port :port :port :port 형식으로 표현되며 , HTTP HTTP 프로토콜인 경우는 host:port host:port host:port형식 .
 path : path : path : 파일이나 애플리케이션 경로를 의미 .
 params : params : params : params : 애플리케이션에 전달될 매개변수입니다 . 현재는 사용하지 않음 .
 query : query : query : query : query : 질의 문자열 또는 매개변수로 , 앰퍼샌드 (&) 로 구분된 이름 =값 쌍 형식으로 표현 .
 fragment : fragment : fragment : 문서 내의 앵커 등 조각을 지정 .웹 클라이언트 라이브러리
34 urllib.parse urllib.parse urllib.parse urllib.parse 모듈
 urllib urllib urllib
• url url인자로 지정한 URLURL 로 연결하고 , 유사 파일 객체를 반환 .
• url 인자는 문자열이거나 , Request , Request , Request , Request 클래스의 인스턴스가 올 수 있음 .
• url 에 file 스킴을 지정하면 로컬 파일을 열 수 있음 .
• 디폴트 요청 방식은 GET GET이고 , 웹 서버에 전달할 파라미터가 있으면 질의 문자열을 url 인자에 포함해서 보냄 .
• 요청 방식을 POST 로 보내고 싶으면 data 인자에 질의 문자열을 지정해주면 됨.
• 옵션인 timeout timeout 은 응답을 기다리는 타임아웃 시간을 초로 표시 웹 클라이언트 라이브러리
35 http.client http.client http.client 모듈
 http.client http.client http.client모듈 사용 시 코딩 순서
 GET, POST GET, POST GET, POST GET, POST GET, POST 이외의 방식으로 요청을 보내거나 , 요청 헤더와 바디 사이에 타이머를 두어 시간을 지연시키는 등 urllib.requesturllib.request urllib.request urllib.requesturllib.request urllib.request urllib.request 모듈로는 쉽게 처리 할 수 없는 경우 혹은 HTTP HTTP 프로토콜 요청에 대한 저수준의 더 세밀한 기 능이 필요할 때는 http.client http.client http.client 모듈을 사용함 웹 클라이언트 라이브러리
36 간단한 웹 서버
 웹 서버 라이브러리 웹 서버라이브러리
37 HTTP Server HTTP Server HTTP Server HTTP Server 및 BaseHTTP BaseHTTP RequestHandler RequestHandler RequestHandler RequestHandler 클래스
 원하는 웹 서버를 만들기 위해서는 기반 클래스를 임포트하거나 상 속받 아야 함.
 이처럼 기반이 되는 클래스가 바로 HTTPServer HTTPServer HTTPServerHTTPServerHTTPServer 및 BaseHTTPRequestHandler BaseHTTPRequestHandler BaseHTTPRequestHandler BaseHTTPRequestHandler BaseHTTPRequestHandler BaseHTTPRequestHandler BaseHTTPRequestHandler 클래스
 Python my_httpserver.py Python my_httpserver.pyPython my_httpserver.py Python my_httpserver.py Python my_httpserver.py Python my_httpserver.py Python my_httpserver.pyPython my_httpserver.py Python my_httpserver.py 웹 서버라이브러리
38 SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler
 Simple Simple 웹 서버 실행 화면
 Python Python Python –m http.server http.server http.server http.serverhttp.server 8888
 디렉토리 리스트가 나오는 것은 SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandlerSimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandlerSimpleHTTPRequestHandlerSimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler의 do_GET do_GET() 메소드가 디렉토리 리스트를 반환하도록 구현 웹 서버라이브러리
39 CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler 클래스
 SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler클래스와 유사하게 CGIHTTPRequestHandlerCGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandlerCGIHTTPRequestHandler CGIHTTPRequestHandlerCGIHTTPRequestHandler CGIHTTPRequestHandler 클래스가 미리 구현되어 있어서 필요할 때 즉 시 웹 서버를 실행할 수 있음
 CGIHTTPRequestHandlerCGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandlerCGIHTTPRequestHandler CGIHTTPRequestHandlerCGIHTTPRequestHandlerCGIHTTPRequestHandler 클래스에는 do_POST do_POST() () 메소드가 정의되어 있어서 POST POST 방식을 처리할 수 있음
 SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler SimpleHTTPRequestHandler클래스를 상속받고 있어서 , GET , GET , GET 및 HEAD HEAD HEAD 방식도 처리 웹 서버라이브러리
40 CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler CGIHTTPRequestHandler 클래스
 CGI CGI 웹 서버 실행
 python pythonpython–mhttp.server http.server http.server http.serverhttp.server 8888 -cgi 웹 서버라이브러리
41 CGI CGI 관련 모듈
 웹 서버가 사용자의 요청을 애플리케이션에 전달하고 애플리케이션의 처 리 결과를 애플 리케이션으로부터 되돌려받기 위한 , 즉 웹 서버와 애플리 케이션 간에 데이터를 주고받기 위한 규격을 CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway CGI(Common Gateway Interface) Interface)Interface) Interface) 라고 함 CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI 라이브러리
42 WSGI 개요
 CGI CGI 방식은 요청이 들어올 때마다 처리를 위한 프로세스가 생성되는 방 식이라 서, 짧은 시간에 수천 , 수만의 다량 요청을 받으면 서버의 부하가 높아져서 프로세스가 멈추거나 다운될 수도 있음
 이러한 CGICGICGI의 단점을 해결하고 , 파이썬 언어로 애플리케이션을 좀 더 쉽 게 작성할 수 있도록 웹 서버와 웹 애플리케이션 간에 연동 규격을 정의 한 것이 WSGI WSGI WSGI 규격 CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI 라이브러리
43 WSGI 서버의 애플리케이션 처리 과정
 WSGI WSGI 애플리케이션의 처리 순서 CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI 라이브러리
44 wsgiref.simple_server wsgiref.simple_server wsgiref.simple_server 모듈
 이 모듈은 WSGI WSGI 스펙을 준수하는 웹 서버 (일명 , WSGI , WSGI , WSGI 서버 )에 대한 참조 reference reference reference reference 서버 , 즉 개발자에게 참고가 될 수 있도록 미리 만들어 놓은 WSGIServer WSGIServer WSGIServer WSGIServerWSGIServerWSGIServer 클래스와 WSGIRequestHandlerWSGIRequestHandlerWSGIRequestHandlerWSGIRequestHandler WSGIRequestHandler WSGIRequestHandlerWSGIRequestHandler WSGIRequestHandler WSGIRequestHandlerWSGIRequestHandlerWSGIRequestHandler 클래스를 정의 .
 장고의 runserver runserverrunserver runserverrunserver 도 이들 클래스를 사용하여 만든 테스트용 웹 서버
 python my_wsgiserver.py python my_wsgiserver.pypython my_wsgiserver.py python my_wsgiserver.py python my_wsgiserver.py python my_wsgiserver.py python my_wsgiserver.pypython my_wsgiserver.py python my_wsgiserver.py CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI CGI/WSGI 라이브러리
45 정리
 웹프로그램의 이해
 다양한 웹 클라언트
 웹 클라이언트 라이브러리
 웹 서버 라이브러리
 CGICGI /WSGI /WSGI 라이브러리 정리

Django Django 웹 프레임워크
2일반적인 특징
 MVC MVC 패턴 기반 MVT MVT
• 장고는 MVC Model MVC Model MVC Model MVC Model MVC Model-View View -Controller Controller ControllerControllerControllerController 를 기반으로 한 프레임워크
• 장고에서는 View View 를 Template, ControllerTemplate, Controller Template, Controller Template, Controller Template, Controller Template, Controller Template, ControllerTemplate, ControllerTemplate, ControllerTemplate, Controller 를 View View 라고 함
 객체 관계 매핑
• 장고의 객체 관계 매핑 ORM, Object ORM, Object ORM, Object -Relational MappingRelational Mapping Relational Mapping Relational MappingRelational Mapping Relational MappingRelational Mapping Relational Mapping Relational MappingRelational Mapping 은 데이터베이스 시스템과 데이터 모델 클래스를 연결시키는 다리와 같은 역할 일반적인 특징
3일반적인 특징
 자동으로 구성되는 관리자 화면
• 장고는 웹 서버의 콘텐츠 , 즉 데이터베이스에 대한 관리 기능을 위하여 프로젝트를 시 작하는 시점 에 기본 기능으로 관리자 화면을 제공
 우안한 URL 설계
• 웹 프로그래밍에서 URL 디자인은 필수인데 , 장고에서는 유연하면서도 강력한 기능을 제공 . 장고에서는 우아한 Elegant URL Elegant URL Elegant URL 방식을 채택하여 URL 을 직관적이고 쉽게 표현 일반적인 특징
4일반적인 특징
 자체 탬플릿 시스템
• 장고는 내부적으로 확장이 가능하고 디자인이 쉬운 강력한 템플릿 시스템을 갖고 있음 . 이를 통해 화면 디자인과 로직에 대한 코딩을 분리하여 독립적으로 개발 진행
 캐시 시스템
• 동적인 페이지를 만들기 위해서 데이터베이스 쿼리를 수행하고 템플릿을 해석하며 , 관 련 로직을 실행해서 페이지를 생성하는 일은 서버에 엄청난 부하를 주는 작업 일반적인 특징
5일반적인 특징
 다국어 지원
• 다국어 장고는 동일한 소스코드를 다른 나라에서도 사용할 수 있도록 텍스트의 번역 , 날짜 /시간 /숫자의 포맷 , 타임존의 지정 등과 같은 다국어 환경을 제공
 소스 변경사항 자동 반영
• 장고에서는 *.py 파일의 변경 여부를 감시하고 있다가 변경이 되면 실행 파일에 변경 내역을 바로 반영 일반적인 특징
6윈도우에서 장고 설치
 파이썬 3.x 버전을 설치하면 pip pip 프로그램도 같이 설치 .
 pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) pip(Python Install Package) 프로그램은 파이썬의 오픈소스 저장소인 PyPI (Python Package Index) (Python Package Index)(Python Package Index) (Python Package Index) (Python Package Index)(Python Package Index) (Python Package Index) (Python Package Index)(Python Package Index) (Python Package Index) (Python Package Index) 에 있는 SW SW SW 패키지를 설치하고 관리해주는 명령
 (base) C: (base) C: (base) C:(base) C: \MyTest> MyTest> MyTest>pip install Djangopip install Django pip install Django pip install Django pip install Djangopip install Django pip install Django pip install Django 장고 프로그램 설치
https://www.djangoproject.com/download/ https://www.djangoproject.com/download/ https://www.djangoproject.com/download/ https://www.djangoproject.com/download/https://www.djangoproject.com/download/ https://www.djangoproject.com/download/ https://www.djangoproject.com/download/ https://www.djangoproject.com/download/ https://www.djangoproject.com/download/
7장고 프로그램 설치 확인
 장고는 파이썬 환경에서 동작하는 패키지이므로 , 장고가 정상적으로 설치 되었는지 확인하기 위해서 아래와 같이 명령을 입력
 (base) C: (base) C: (base) C:(base) C: \MyTest>python MyTest>python MyTest>python MyTest>python MyTest>python MyTest>python -m django m django m django m django m django -- versionversion version 장고 프로그램 설치
8장고에서의 애플리케이션 개발 방식
 웹 사이트의 전체 프로그램 또는 모듈화된 단위 프로그램을 애플리케 이션
 즉, 프로그램으로 코딩할 대상을 애플리케이션이라고 부름
 사이트에 대한 전체 프로그램을 프로젝트 (Project) (Project)(Project)(Project) (Project) 라고 함
 모듈화된 단위 프로그램을 애플리케이션 (Application) (Application) (Application) (Application)이라 부름 장고에서의 애플리케이션 개발 방식
9MVC 패턴 기반 MVT
 일반적인 MVC MVC 패턴
 개발 시 일반적으로 언급되는 MVC(Model MVC(Model MVC(ModelMVC(ModelMVC(Model -View View-Controller) Controller) Controller) Controller) Controller) Controller) Controller) 패턴이란 데이터 Model, Model, Model, 사용자 인터페이스 View, View, 데이터를 처리하는 로직 Controller ControllerController Controller을 구분해서 한 요소가 다른 요소들에 영향을 주지 않도록 설 계하는 방식 장고에서의 애플리케이션 개발 방식
10 MVC 패턴 기반 MVT
 장고의 MVT MVT 패턴
 View 를 Template, ControllerTemplate, Controller Template, Controller Template, ControllerTemplate, Controller Template, Controller Template, Controller Template, Controller 는 View 라고 표현
 MVC MVC 대신에 MVT(Model MVT(Model MVT(Model MVT(Model-ViewView -Template)Template) Template) Template)Template)Template)패턴이라고 패턴이라고 패턴이라고 함
 모델 (Model) (Model)은 데이터베이스에 저장되는 데이터를 의미
 템플릿 (Template) (Template) (Template)(Template)(Template) 은 사용자에게 보여지는 UI 부분
 뷰(View) (View) 는 실질적으로 프로그램 로직이 동작하여 데이터를 가져오고 적 절하게 처리한 결과를 템플릿에 전달하는 역할을 수행 장고에서의 애플리케이션 개발 방식
11 MVC 패턴 기반 MVT
 장고의 MVT MVT 패턴 장고에서의 애플리케이션 개발 방식
12 장고 MVT 패턴
 장고의 MVT MVT 패턴
• 클라이언트로부터 요청을 받으면 URL.conf 를 이용하여 URL 을 분석
• URL 분석 결과를 통해 해 당 URL 에 대한 처리를 담당할 뷰를 결정
• 뷰는 자신의 로직을 실행하면서 . 만일 데이터베이스 처리 가 필요하면 모델 을 통해 처리 하고 그 결과를 반환
• 뷰는 자신의 로직 처리가 끝나면 템플릿 을 사용하여 클라이언트에 전송할 HTML HTML HTML 파일 을 생성
• 뷰는 최종 결과로 HTML HTML HTML 파일을 클라이언트에게 보내 응답 장고에서의 애플리케이션 개발 방식
13 Model Model – 데이터베이스 정의 (models.py models.py models.py)
 모델이란 사용될 데이터에 대한 정의를 담고 있는 장고의 클래스
 장고는 ORM ORM 기법을 사용하여 애플리케이션에서 사용할 데이터베이스를 클래스로 매핑해서 코딩할 수 있음
 장고는 테이블 및 컬럼을 자동으로 생성하기 위해 필요한 많은 규칙 장고에서의 애플리케이션 개발 방식
14 URL.conf URL.conf URL.conf – URL 정의 (urls.py) (urls.py) (urls.py)
 파이썬의 URL URL 정의 방식은 전통적인 자바나 PHP PHP 계열의 URL URL보다 직관 적이고 이해하기가 쉬움 .
 이런 방식을 우아한 (Elegant URL) (Elegant URL) (Elegant URL) (Elegant URL) 이라고 부르는 것.
 URL 을 정의하기 위해서는 urls.py urls.py urls.py urls.py 파일에 URL 과 처리 함수 (뷰 View 라고 부름 )를 매핑하는 파이썬 코드를 작성하면 됨 장고에서의 애플리케이션 개발 방식
15 웹 클라이언트가 웹 서버에 페이지 요청 시
 웹 클라이언트가 웹 서버에 페이지 요청 시
 장고에서 URLURL 을 분석하는 순서
• Setting.py Setting.py Setting.py 파일의 ROOT_URLCONF ROOT_URLCONF ROOT_URLCONF ROOT_URLCONF ROOT_URLCONF ROOT_URLCONF ROOT_URLCONF 항목을 읽어 최상위 URLconfURLconf URLconfURLconf (urls.py )(urls.py ) (urls.py ) (urls.py )(urls.py )의 위치 파악
• URLconfURLconf URLconf 를 로딩하여 urlpatterns urlpatterns urlpatterns urlpatterns 변수에 지정되어 있는 UR L리스트를 검사
• 위에서부터 순서대로 URLURL 리스트의 내용을 검사하면서 URLURL 패턴이 매치되면 검사를 종료
• 매치된 UR L의 뷰를 호출 -여기서 뷰는 함수 또는 클래스의 메소드
• 호출 시 HttpRequestHttpRequest HttpRequestHttpRequest 객체와 매칭할 때 추출된 단어들을 뷰에 인자로 넘겨줌
• URLURL 리스트 끝까지 검사했는데도 매칭에 실패하면 에러를 처리하는 뷰를 호출 장고에서의 애플리케이션 개발 방식
16 URL 패턴을 정의
 URL URL패턴의 일부 문자열을 추출하기 위한 것이며
 <type:name type:name type:name type:name >형식으로 형식으로 사용
 장고에서는 Path ConverterPath Converter Path Converter Path Converter Path ConverterPath Converter
• str : /( str : /( str : /(str : /(슬래시 )를 제외한 모든 문자열과 매치 . 타입이 지정되지 않았다면 디폴트로 str 타입을 사용
• Int : Int : 0 또는 양의 정수와 매치 매치된 정수는 파이썬의 int 타입으로 변환
• slug : slug : slug : slug : 형식의 문자열 (ASCII, (ASCII, 숫자 , 하이픈 , 밑줄로만 구성됨 )과 매치
• uuid : UUID : UUID : UUID : UUID : UUID 형식의 문자열과 매치 . 매치된 문자열은 파이썬의 UUID UUID UUID UUID 타입으로 변환
• path :/(ath :/( ath :/( 슬래시 )를 포함한 모든 문자열과 매치 이는 URL URL URL 패턴의 일부가 아니라 전체를 추출하고자 할 때 많이 사용 장고에서의 애플리케이션 개발 방식
17 URL 패턴을 정의
 정규표현식에 사용되는 문자들 장고에서의 애플리케이션 개발 방식
18 View – 로직 정의 (view.py) (view.py)
 뷰는 웹 요청을 받아서 데이터베이스 접속 등 해당 애플리케이션의 로직 에 맞는 처리를 하고 , 그 결과 데이터를 HTML 로 변환하기 위하여 템플릿 처리를 한 후에 , 최종 HTML 로 된 응답 데이터를 웹 클라이언트로 반환하 는 역할
 간단한 뷰 -현재의 날짜와 시간 변환 장고에서의 애플리케이션 개발 방식
19 Template Template Template – 화면 UI UI 정의 (*.html (*.html )
 개발자가 응답에 사용할 *.html .html 파일을 작성하면 , 장고는 이를 해석해서 최종 HTML 텍스트 응답을 생성하고 , 이를 클라이언트에게 보내줌
 클라이언트 (보통 웹 브라우저 )는 응답으로 받은 HTML 텍스트를 해석해 서 우리가 보는 웹 브라우저 화면에 UI 를 보여주는 것
 템플릿 파일은 *.html 확장자를 가지며 , 장고의 템플릿 시스템 문법에 맞게 작성
 장고에서 템플릿 파일을 찾을 때는 TEMPLATES TEMPLATES TEMPLATES TEMPLATES TEMPLATES TEMPLATES TEMPLATES 및 INSTALLED_APPS INSTALLED_APPSINSTALLED_APPS INSTALLED_APPS INSTALLED_APPS INSTALLED_APPS에서 지 정된 앱의 디렉토리를 검색 .
 이 항목들은 프로젝트 설정 파일인 settings.py settings.py settings.py 파일에 정의되어 있음 장고에서의 애플리케이션 개발 방식
20 MVT 코딩 순서
 모델 , 뷰, 템플릿 셋 중에서 무엇을 먼저 코딩해야 하는지에 대해 정해진 순서는 없음 .
 MVT MVT 방식에 따르면 화면 설계는 뷰와 템플릿 코딩으로 연결되고 , 테이 블 설계는 모델 코딩에 반영 .
 그렇기 때문에 독립적으로 개발할 수 있는 모델을 먼저 코딩하고 , 뷰와 템 플릿은 서로 영향을 미치므로 모델 이후에 같이 코딩하는 것이 일반적 장고에서의 애플리케이션 개발 방식
21 MVT 코딩 순서
 프로젝트 뼈대 만들기 : 프로젝트 및 앱 개발에 필요한 디렉토리와 파일 생성
 모델 코딩하기 : 테이블 관련 사항을 개발 (models.py, admin.py (models.py, admin.py (models.py, admin.py (models.py, admin.py (models.py, admin.py (models.py, admin.py (models.py, admin.py 파일 )
 URLconf URLconf 코딩하기 : URL : URL 및 뷰 매핑 관계를 정의 (urls.py (urls.py (urls.py (urls.py (urls.py 파일 )
 템플릿 코딩하기 : 화면 UI 개발 (templates/ (templates/ (templates/ (templates/ 디렉토리 하위의 *.html 파 일들 )
 뷰 코딩하기 : 애플리케이션 로직 개발 (views.py (views.py (views.py (views.py (views.py 파일 )장고에서의 애플리케이션 개발 방식
22 애플리케이션 설계
 index.html : index.html : index.html : index.html : 최근에 실시하고 있는 질문의 리스트를 보여줌 .
 detail.html : detail.html : detail.html : detail.html : 하나의 질문에 대해 투표할 수 있도록 답변 항목을 폼으로 보여줌
 results.html : results.html : results.html : results.html : results.html : 질문에 따른 투표 결과를 보여줌 애플리케이션 설계
23 애플리케이션 설계
 index.html : index.html : index.html : index.html : 최근에 실시하고 있는 질문의 리스트를 보여줌 .
 detail.html : detail.html : detail.html : detail.html : 하나의 질문에 대해 투표할 수 있도록 답변 항목을 폼으로 보여줌
 results.html : results.html : results.html : results.html : results.html : 질문에 따른 투표 결과를 보여줌 애플리케이션 설계
24 애플리케이션 설계
 Question Question Question Question 테이블 설계
 Choice Choice 테이블 설계 애플리케이션 설계
25 프로젝트 뼈대 만들기
 프로젝트 뼈대의 최종 디렉토리 프로젝트 뼈대 만들기
26 프로젝트 뼈대 만들기
 프로젝트 뼈대의 최종 디렉토리 프로젝트 뼈대 만들기
27 프로젝트 뼈대 만들기
 프로젝트 뼈대의 최종 디렉토리 프로젝트 뼈대 만들기
28 프로젝트 뼈대 만들기
 프로젝트 뼈대의 최종 디렉토리 프로젝트 뼈대 만들기
29 프로젝트 뼈대 만들기 순서 명령
 > django django django -admin admin startproject startproject startprojectstartproject mysite mysite mysite// mysite mysite mysite라는 프로젝트를 생성함
 > python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py startapp startappstartapp startappstartapppolls // polls // polls// polls 라는 애플리케이션을 생성
 > notepad settings.py notepad settings.py notepad settings.py notepad settings.py notepad settings.py notepad settings.py notepad settings.py // 설정 파일을 확인 및 수정
 > python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate python manage.py migrate // 데이터베이스에 기본 테이블을 생성
 > python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py python manage.py runserver runserverrunserver runserverrunserver // 현재까지 작업을 개발용 웹 서버로 확인 프로젝트 뼈대 만들기
30 프로젝트 생성
 mysiteysite ysite라는 프로젝트 만듬
 (base) C: (base) C: (base) C:(base) C: \MyTest>django MyTest>django MyTest>django MyTest>django MyTest>djangoMyTest>djangoMyTest>django-admin admin startproject startproject startproject startproject mysite mysite mysite프로젝트 뼈대 만들기
31 프로젝트 생성
 mysite mysite mysite구성 프로젝트 뼈대 만들기
32 프로젝트 생성
 mysite mysite mysite디렉토리 이름 변경
 (base) C: (base) C: (base) C:(base) C: \MyTest>move MyTest>move MyTest>move MyTest>move MyTest>move mysite mysite mysiteprojectsite projectsite projectsite projectsite projectsite프로젝트 뼈대 만들기
33 애플리케이션 생성
 프로젝트 루트 디렉토리 projectsiterojectsiterojectsite rojectsite으로 이동해서 polls 라는 애플리케이 션을 만드는 명령을 실행
 (base) C: (base) C: (base) C:(base) C: \MyTest>cd MyTest>cd MyTest>cd projectsiteprojectsiteprojectsite projectsite
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py startapp startapp startapppolls 프로젝트 뼈대 만들기
34 애플리케이션 생성
 polls 라는 애플리케이션 폴더 확인
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsiteprojectsiteprojectsiteprojectsite projectsite projectsite projectsite\polls>dirpolls>dirpolls>dir 프로젝트 뼈대 만들기
35 프로젝트 설정 파일 변경
 프로젝트에 필요한 설정 값들은 settings.p settings.p settings.p y파일에 지정
 settings.py ettings.py ettings.py ettings.py ettings.py 파일은 프로젝트의 전반적인 사항들을 설정해주는 곳으로 , 루트 디렉토리를 포함한 각종 디렉토리의 위치 , 로그의 형식 ,프로젝트에 포함된 애플리케이션의 이름 등이 지정되어 있음 프로젝트 뼈대 만들기
36 프로젝트 설정 파일 변경
 ALLOWED_HOSTS ALLOWED_HOSTS ALLOWED_HOSTS ALLOWED_HOSTS ALLOWED_HOSTS ALLOWED_HOSTS 항목을 적절하게 지정
• ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’] ALLOWED_HOSTS = ['192.168.35.61', 'localhost', 127.0.0.1’]
 애플리케이션들은 모두 설정 파일에 등록 (polls (polls (polls 애플리케이션도 등록 )
• INSTALLED_APPS =[ ~, ' INSTALLED_APPS =[ ~, ' INSTALLED_APPS =[ ~, ' INSTALLED_APPS =[ ~, ' INSTALLED_APPS =[ ~, ' INSTALLED_APPS =[ ~, ' polls.apps.PollsConfig polls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfig polls.apps.PollsConfig polls.apps.PollsConfig polls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfigpolls.apps.PollsConfig polls.apps.PollsConfig’, ] ’, ] ’, ]
 프로젝트에 사용할 데이터베이스 엔진
• 장고는 디폴트로 SQLite3 SQLite3 SQLite3 SQLite3 데이터베이스 엔진을 사용하도록 설정
 타임존 지정 (기본은 세계표준시 (UTC) (UTC) 로 되어 있음 . 한국시간을 변경 )
• #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC'#TIME_ZONE = 'UTC' #TIME_ZONE = 'UTC'
• TIME_ZONE = 'Asia/Seoul'TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul'TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul' TIME_ZONE = 'Asia/Seoul'TIME_ZONE = 'Asia/Seoul' 프로젝트 뼈대 만들기
37 기본 테이블 생성
 migrate migrate migrate 명령은 데이터베이스에 변경사항이 있을 때 반영해주는 명령
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsite>python manage.py migrateprojectsite>python manage.py migrateprojectsite>python manage.py migrateprojectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrateprojectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrateprojectsite>python manage.py migrate프로젝트 뼈대 만들기
38 작업 확인하기
 프로젝트의 뼈대에 해당하는 프로젝트 디렉토리 , 애플리케이션 디렉토리 를 비롯해 관련 파일들 그리고 사용자 및 그룹 테이블을 만들었음
 확인을 위해서 웹 서버를 실행하고 , 그 웹 서버에 접속
 장고에서는 개발 과정 도중에 현재 상태를 확인해볼 수 있도록 runserver runserver runserverrunserver 라고 하는 간단한 테스트용 웹 서버를 제공 프로젝트 뼈대 만들기
39 작업 확인하기
 웹 서버를 실행하기 위해서 다음 명령을 입력합니다 . 하나의 창에서 작업 해도 되지만 runserver runserver runserverrunserver 용으로 별도의 cm d창을 열어 사용하는 것이 편리
 (base) C: (base) C: (base) C:(base) C: (base) C: \MyTest MyTestMyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserver runserver runserverrunserverrunserverrunserver127.0.0.1:8000 127.0.0.1:8000 127.0.0.1:8000
 (base) C: (base) C: (base) C:(base) C: (base) C: \MyTest MyTestMyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserver runserver runserverrunserverrunserverrunserver
 (base) C: (base) C: (base) C:(base) C: (base) C: \MyTest MyTestMyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserver runserver runserverrunserverrunserverrunserver0:8000 프로젝트 뼈대 만들기
40 작업 확인하기
 runserver runserver runserverrunserver 가 정상적으로 실행되었다면 , 웹 브라우저를 열고 IP 주소는 runserver runserver runserverrunserver 가 동작하는 서버 IP 주소를 입력
 http://127.0.0.1:8000/ http://127.0.0.1:8000/ http://127.0.0.1:8000/ http://127.0.0.1:8000/ http://127.0.0.1:8000/ http://127.0.0.1:8000/ 프로젝트 뼈대 만들기
41 Admin Admin 사이트 접속
 기본적으로 제공하는 Admin Admin 사이트에 접속해서 테이블이 생성 확인
 브라우저의 주소창에 IP 주소와 포트번호 동일 , URL , URL 경로만 /admin /admin추가
 http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/adminhttp://127.0.0.1:8000/admin 프로젝트 뼈대 만들기
42 Admin Admin 사이트 접속
 로그인하려면 username, password username, password username, passwordusername, password username, passwordusername, passwordusername, password를 넣어야 되는데 아직 생성하지 않 았음
 Admin Admin Admin 사이트에 로그인하기 위한 관리자 (슈퍼유저 )를 생성
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py createsuperuser createsuperuser createsuperuser createsuperuser 프로젝트 뼈대 만들기
43 Admin Admin 사이트 접속
 http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/adminhttp://127.0.0.1:8000/admin
 로그인 창에서 username, password username, password username, password username, passwordusername, password username, passwordusername, passwordusername, password입력 프로젝트 뼈대 만들기
44 Admin Admin 사이트 접속
 사용자 확인 프로젝트 뼈대 만들기
45 Admin Admin 사이트 접속
 Admin Admin 사이트에서 Users Users와 Groups Groups Groups Groups 테이블을 포함하여 새롭게 만들 테 이블에 대한 데이터의 입력 , 변경 ,삭제 등의 작업을 할 수 있음
 Admin Admin Admin 화면에서 기본적으로 Users Users와 Groups Groups Groups 테이블이 보이는 것은 이 미 settings.py settings.py settings.py 파일에 djangodjangodjangodjangodjangodjango. contrib.auth contrib.auth contrib.auth contrib.auth contrib.authcontrib.authcontrib.auth애플리케이션이 등록되어 있기 때문
 즉 장고에서 기본으로 제공하는 auth auth auth 앱에 Users Users와 Groups Groups Groups Groups 테이블이 미 리 정의 프로젝트 뼈대 만들기
46 골격 생성
 애플리케이션을 MVT MVT 패턴 방식으로 개발할 수 있도록 골격 생성
 (base) C: (base) C: (base) C:(base) C: \MyTest>tree /F MyTest>tree /F MyTest>tree /F MyTest>tree /F MyTest>tree /F MyTest>tree /F projectsite projectsite projectsite projectsite projectsite프로젝트 뼈대 만들기
47 정리
 일반적인 특징
 장고에서의 애플리케이션 정리

Django Django 웹 프레임워크
2Model Model 코딩
 모델 작업은 데이터베이스에 테이블을 생성하는 작업
 >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // >notepad models.py // 테이블을 정의함
 >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // >notepad admins.py // 정의된 테이블이 Admin Admin Admin 화면에 보이게 함
 >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py makemigrations makemigrations makemigrations makemigrations // 데이터베이스에 변경이 필요 한 사항을 추출함
 >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // >python manage.py migrate // 데이터베이스에 변경사항을 반영함
 >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py >python manage.py runserver runserverrunserver runserverrunserver // 현재까지 작업을 개발용 웹 서버로 확인함 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
3테이블 정의
 polls 애플리케이션은 Question Question Question과 Choice Choice 두 개의 테이블이 필요
 테이블은 models.py models.py models.py models.py models.py 파일에 정의 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
4테이블 정의
 테이블은 models.py models.py models.py 파일에 정의 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
5Admin Admin 사이트에 테이블 반영
 models.py models.py models.py 파일에서 정의한 테이블도 admin admin 사이트에 보이도록 등록
 admin.py admin.py admin.py admin.py admin.py 파일에 등록
• models.py models.py models.py models.py 모듈에서 정의한 Question, Choice Question, Choice Question, Choice Question, Choice Question, Choice Question, Choice 클래스를 임포트 하 고 , admin.site.register admin.site.register admin.site.registeradmin.site.register admin.site.register admin.site.registeradmin.site.registeradmin.site.registeradmin.site.register () 함수를 사용하여 임포트 한 클래스를 Admin Admin Admin 사이트에 등록 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
6데이터베이스 변경사항 반영
 테이블의 신규 생성 , 테이블의 정의 변경 등 데이터베이스에 변경이 필요 한 사항이 있으면 , 이를 데이터베이스에 실제로 반영해주는 작업
 변경사항을 데이터베이스에 반영
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py makemigrations makemigrations makemigrations makemigrations 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
7데이터베이스 변경사항 반영
 makemigrations makemigrations makemigrations makemigrations 명령에 의해 polls/migrations polls/migrations polls/migrations polls/migrations polls/migrations 디렉토리 하위에 마이그 레이션 파일들이 생김 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
8데이터베이스 변경사항 반영
 마이그레이션 파일들을 이용해 migrate migrate migrate 명령으로 데이터베이스에 테이 블을 생성
 (base) C: (base) C: (base) C:(base) C: \MyTest MyTest \projectsite>python manage.py migrateprojectsite>python manage.py migrateprojectsite>python manage.py migrateprojectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrateprojectsite>python manage.py migrate projectsite>python manage.py migrate projectsite>python manage.py migrateprojectsite>python manage.py migrate애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
9작업 확인
 정상적으로 잘 처리되었는지 확인하기 위해 Admin Admin 사이트에 접속
 하나의 창에서 작업해도 되지만 runserver runserver runserverrunserver 용으로 별도의 cmd 창을 열어 사용하는 것이 편리
• (base) C: (base) C: (base) C: (base) C: \MyTest MyTestMyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserverrunserver 127.0.0.1:8000 127.0.0.1:8000
• (base) C: (base) C: (base) C: (base) C: \MyTest MyTestMyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserverrunserver
• (base) C: (base) C: (base) C: (base) C: \MyTest MyTestMyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserverrunserver 0:8000 0:8000애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
10 작업 확인
 Questions Questions QuestionsQuestions와 Choices Choices 테이블을 만든 모델이 정상적으로 등록 애플리케이션 개발하기 – Model Model Model Model Model Model 코딩
11 처리 흐름 설계
 사용자에게 보여지는 페이지가 3개이므로 , 3 , 3개의 템플릿 파일이 필요 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
12 처리 흐름 설계
 URL/ URL/ 뷰 매핑을 URLconf URLconf URLconf 라고 하며 urls.py urls.py 파일에 작성 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
13 처리 흐름 설계
 로직의 흐름상 URLcon URLcon URLconf를 먼저 코딩한 후에 뷰,템플릿 또는 템플릿 , 뷰 순서로 코딩하는 것이 일반적
 urls.py urls.py urls.py urls.py 작성 // URLconf URLconf 내용을 코딩
 views.index views.index views.index () () 함수 작성 // index.html // index.html // index.html // index.html // index.html // index.html 템플릿도 같이 작성
 view view s.detail s.detail s.detail() () 함수 작성 // d etail.htm l // d etail.htm l // d etail.htm l // d etail.htm l // d etail.htm l // d etail.htm l 템플릿도 같이 작성
 views.voteO views.voteO views.voteOviews.voteOviews.voteO 함수 작성 // 리다이렉션 처리 들어있음
 view s.results0 view s.results0 view s.results0 view s.results0 view s.results0 함수 작성 // results.htm l // results.htm l // results.htm l // results.htm l // results.htm l // results.htm l // results.htm l 템플릿도 같이 작성 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
14 URLconf URLconf URLconf 코딩
 URLconf URLconf URLconf 설계 내용에 따르면 , Admin , Admin , Admin 사이트까지 포함해서 5개의 UR L과 뷰가 필요
 urls.py(C: urls.py(C: urls.py(C:urls.py(C: \MyTestMyTestMyTestMyTest \projectsite projectsiteprojectsite projectsite projectsite projectsite\mysite mysite mysite) 파일에 코딩 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
15 URLconf URLconf URLconf 코딩
 urls.py(C: urls.py(C: \MyTestMyTestMyTestMyTest \projectsite projectsiteprojectsite projectsite projectsite\mysite mysite mysite\polls) polls) polls) 파일에 코딩 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
16 뷰 함수 index() index() 및 템플릿 작성
 뷰함수와 템플릿은 서로에게 영향을 미치기 때문에 보통 같이 작업
 내용을 구현하기 위해 템플릿 파일 index.html index.html index.html 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
17 뷰 함수 index() index() 및 템플릿 작성
 내용을 구현하기 위해 템플릿 파일 index.html index.html index.html애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
18 뷰 함수 detai l() 및 템플릿 작성
 3개의 질문 중 하나를 선택했을 때, 질문에 대한 답변 항목을 보여주고 투 표하도록 하는 화면
 템플릿 파일인 detail.htm detail.htm detail.htm l애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
19 뷰 함수 detai l() 및 템플릿 작성
 템플릿 파일인 detail.htm detail.htm l애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
20 뷰 함수 detai l() 및 템플릿 작성
 polllsollls ollls\views.py views.py 에 detail() detail() detail() 함수 작성 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
21 뷰 함수 vote() vote() 및 리다이렉션 작성
 vote() vote() vote() vote() 뷰 함수의 호출과 연계된 UR L은 detail.html detail.html detail.html 템플릿 파일에서 받음
 vote ote ote 버튼을 누르면 vote(vote(vote(vote( )뷰 함수가 호출되는 것 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
22 뷰 함수 vote() vote() 및 리다이렉션 작성
 views.py views.py 파일을 열고 vote() vote() vote() vote() 뷰 함수의 내용 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
23 뷰 함수 result result results() 및 리다이렉션 작성
 results()results() 뷰 함수의 호출과 연계된 URL URL은 votevotevotevotes() 뷰 함수의 리다이렉트 리다이렉트 리다이렉트 결과
 폼 데이터를 처리한 후에 그 결과를 보여주는 페이지로 리다이렉트시 켜주기 위해 votes() votes() votes() votes() 뷰 함수에 실행 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
24 뷰 함수 result result results() 및 리다이렉션 작성
 views.py views.py 파일을 열고 results()results() results() 뷰 함수의 내용을 추가 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
25 뷰 함수 result result results() 및 리다이렉션 작성
 템플릿 은 투표 결과로 각 질문마다 투표 카운트를 보여주는 화면
 템플릿 파일 results.htmlresults.html results.html results.html 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
26 작업 확인하기
 웹 서버를 실행하기 위해 하나의 창에서 작업해도 되지만 runserver runserver runserverrunserver 용 으로 별도의 cmd 창을 열어 사용하는 것이 편리
• (base) C: (base) C: (base) C: (base) C: \MyTest MyTestMyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserverrunserver 127.0.0.1:8000 127.0.0.1:8000
• (base) C: (base) C: (base) C: (base) C: \MyTestMyTest MyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserver runserverrunserver
• (base) C: (base) C: (base) C: (base) C: \MyTest MyTestMyTest MyTest\projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py projectsite>python manage.py runserverrunserver runserverrunserver 0:8000 0:8000애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
27 작업 확인하기
 웹 브라우저에서 http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/pollshttp://127.0.0.1:8000/polls 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
28 작업 확인하기
 데이터베이스에 데이터가 들어있지 않아서 질문이 없는 빈 페이지
 웹 브라우저에서 http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin http://127.0.0.1:8000/admin 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
29 작업 확인하기
 Questions Questions Questions Questions 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
30 작업 확인하기
 Questions Questions Questions Questions 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
31 작업 확인하기
 Questions Questions Questions Questions 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
Question Text Question TextQuestion Text Question TextQuestion TextQuestion Text
Date Date
TimeTime Time
What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby?
TodayToday
Now
Who do you like best? Who do you like best? Who do you like best? Who do you like best? Who do you like best? Who do you like best? Who do you like best?
2021 -08 -25
Midnight Midnight
Where do you live? Where do you live? Where do you live? Where do you live?Where do you live? Where do you live?
2021 -08 -24
Noon Noon
32 작업 확인하기
 Questions Questions Questions Questions 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
33 작업 확인하기
 Choices Choices 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
34 작업 확인하기
 Choices Choices 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
Question Question Question
Choice Test Choice Test Choice TestChoice Test
VotesVotes VotesVotes
What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby?
ReadingReading Reading
0
What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby?
Soccer Soccer
0
What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby? What is your hobby?
Climbing
0
35 작업 확인하기
 Choices Choices 데이터 입력 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
36 작업 확인하기
 웹 브라우저에서 http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/pollshttp://127.0.0.1:8000/polls 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
37 작업 확인하기
 웹 브라우저에서 http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/polls http://127.0.0.1:8000/pollshttp://127.0.0.1:8000/polls 애플리케이션 개발하기 –View View View View View 및 TemplateTemplateTemplateTemplateTemplateTemplateTemplateTemplate
38 정리
 애플리케이션 개발하기 -Model Model Model 코딩
 애플리케이션 개발하기 -View View 및 TemplateTemplate Template Template정리
